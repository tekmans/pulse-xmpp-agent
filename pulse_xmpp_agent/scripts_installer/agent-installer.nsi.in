;
; (c) 2016 siveo, http://www.siveo.net
;
; This file is part of Pulse 2, http://www.siveo.net
;
; Pulse 2 is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; Pulse 2 is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Pulse 2; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
; MA 02110-1301, USA.


; Make sure the installer runs as admin
RequestExecutionLevel admin

; Define a few variables
!define PRODUCT_NAME "Pulse Agent"
!define PRODUCT_PUBLISHER "SIVEO"
!define PRODUCT_WEB_SITE "http://www.siveo.net"
!define PRODUCT_VERSION "@@PRODUCT_VERSION@@"
!define PRODUCT_DIR_REGKEY "Software\${PRODUCT_PUBLISHER}\${PRODUCT_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; Variables replaced by the script calling the nsi
!define DOWNLOADS_DIR "@@DOWNLOADS_DIR@@"
!define PYTHON_FILENAME "@@PYTHON_FILENAME@@"
!define PY_VCPYTHON27 "@@PY_VCPYTHON27@@"
!define PY_WIN32 "@@PY_WIN32@@"
!define PY_NETIFACES "@@PY_NETIFACES@@"
!define PY_COMTYPES "@@PY_COMTYPES@@"
!define PY_CONFIGPARSER "@@PY_CONFIGPARSER@@"
!define PY_UTILS "@@PY_UTILS@@"
!define PY_SLEEKXMPP "@@PY_SLEEKXMPP@@"
!define PY_WMI "@@PY_WMI@@"
!define PY_ZIPFILE "@@PY_ZIPFILE@@"
!define LIBCURL_FILENAME "@@LIBCURL_FILENAME@@"
!define PY_CURL "@@PY_CURL@@"
!define PY_LXML "@@PY_LXML@@"
!define PY_CRYPTO "@@PY_CRYPTO@@"
!define PY_CRON "@@PY_CRON@@"
!define PY_CRON_DEPS_1 "@@PY_CRON_DEPS_1@@"
!define PY_CRON_DEPS_2 "@@PY_CRON_DEPS_2@@"
!define PULSE_AGENT "@@PULSE_AGENT@@"
!define PULSE_AGENT_CONFFILE "@@PULSE_AGENT_CONFFILE@@"
!define PULSE_AGENT_NAME "@@PULSE_AGENT_NAME@@"
!define PULSE_AGENT_MODULE "@@PULSE_AGENT_MODULE@@"
!define PULSE_AGENT_TASK_XML "@@PULSE_AGENT_TASK_XML@@"
!define OPENSSH_NAME "@@OPENSSH_NAME@@"
!define OPENSSH_FILENAME "@@OPENSSH_FILENAME@@"
!define LAUNCHER_SSH_KEY "@@LAUNCHER_SSH_KEY@@"
!define FUSION_INVENTORY_AGENT_FILENAME "@@FUSION_INVENTORY_AGENT_FILENAME@@"
!define INVENTORY_TAG "@@INVENTORY_TAG@@"
!define PULSE_AGENT_PLUGINS "@@PULSE_AGENT_PLUGINS@@"
!define RSYNC_FILENAME "@@RSYNC_FILENAME@@"
!define GENERATED_SIZE "@@GENERATED_SIZE@@"

SetCompressor lzma

; Modern UI installer stuff
!include "MUI2.nsh"
!define MUI_ABORTWARNING
!define MUI_ICON "artwork/install.ico"
!define MUI_WELCOMEPAGE_TITLE_3LINES
#!define MUI_HEADERIMAGE
#!define MUI_HEADERIMAGE_RIGHT
#!define MUI_HEADERIMAGE_BITMAP "artwork/header.bmp"
#!define MUI_WELCOMEFINISHPAGE_BITMAP "artwork/wizard.bmp"

; UI pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_LANGUAGE "English"

; Other useful modules
!addincludedir libs
!include "WinVer.nsh"
!include "FileFunc.nsh"
!include "zipdll.nsh"
!include "LogicLib.nsh"
!include "Trim.nsh"
!Include "LogString.nsh"
!Include "StrTok.nsh"


Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
!If "${INVENTORY_TAG}" == ''
  OutFile "Pulse-Agent-win32-${GENERATED_SIZE}-${PRODUCT_VERSION}.exe"
!Else
  OutFile "Pulse-Agent-win32-${GENERATED_SIZE}-${PRODUCT_VERSION}-${INVENTORY_TAG}.exe"
!EndIf
InstallDir "$PROGRAMFILES\Pulse"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show

; Define a few settings
Section -SETTINGS
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
SectionEnd

!define DownloadFile "!insertmacro DownloadFile"
!macro DownloadFile url filename
  inetc::get /NOCANCEL ${url} ${filename} /END
  Pop $0 ;Get the return value
  StrCmp $0 "OK" +3
    MessageBox MB_OK "Download of ${url} failed: $0"
    Quit
!macroend

; Python installation
Section "Python" sec_py
  SetOutPath "$INSTDIR\tmp"
  @@FULL_OR_DL_PYTHON_FILENAME@@
  @@FULL_OR_DL_PY_VCPYTHON27@@
  ${LogString} "Python Installation...."
  ${LogString} "------------------------------------------------------"

  ; Install of Python
  StrCpy $0 `msiexec /i "$INSTDIR\tmp\${PYTHON_FILENAME}" /quiet /norestart ALLUSERS=1 ADDLOCAL=ALL`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Visual C++ Compiler for Python
  StrCpy $0 `msiexec /i "$INSTDIR\tmp\${PY_VCPYTHON27}" /quiet /norestart ALLUSERS=1`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  Delete $INSTDIR\tmp\${PYTHON_FILENAME}
  Delete $INSTDIR\tmp\${PY_VCPYTHON27}
SectionEnd

; Installation of Python modules needed by Pulse Agent
Section "Python Modules" sec_pymod
  SetOutPath "$INSTDIR\tmp"
  @@FULL_OR_DL_PY_WIN32@@
  @@FULL_OR_DL_PY_NETIFACES@@
  @@FULL_OR_DL_PY_COMTYPES@@
  @@FULL_OR_DL_PY_CONFIGPARSER@@
  @@FULL_OR_DL_PY_UTILS@@
  @@FULL_OR_DL_PY_SLEEKXMPP@@
  @@FULL_OR_DL_PY_WMI@@
  @@FULL_OR_DL_PY_ZIPFILE@@
  @@FULL_OR_DL_PY_CURL@@
  @@FULL_OR_DL_PY_LXML@@
  @@FULL_OR_DL_PY_CRYPTO@@
  @@FULL_OR_DL_PY_CRON@@
  @@FULL_OR_DL_PY_CRON_DEPS_1@@
  @@FULL_OR_DL_PY_CRON_DEPS_2@@
  ${LogString} "Python modules Installation...."
  ${LogString} "------------------------------------------------------"

  ; Install of Python module for Windows Extensions (pywin32)
  @@INSTALL_FULL_OR_DL_PY_WIN32@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python netifaces module
  @@INSTALL_FULL_OR_DL_PY_NETIFACES@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python comtypes module
  @@INSTALL_FULL_OR_DL_PY_COMTYPES@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python configparser module
  @@INSTALL_FULL_OR_DL_PY_CONFIGPARSER@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python utils module
  @@INSTALL_FULL_OR_DL_PY_UTILS@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python sleekxmpp module
  @@INSTALL_FULL_OR_DL_PY_SLEEKXMPP@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python wmi module
  @@INSTALL_FULL_OR_DL_PY_WMI@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python zipfile module
  @@INSTALL_FULL_OR_DL_PY_ZIPFILE@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Copy libcurl DLL to system32 folder
  CopyFiles "${DOWNLOADS_DIR}\usr\bin\${LIBCURL_FILENAME}" "$SYSDIR"

  ; Install of Python curl module (pycurl)
  @@INSTALL_FULL_OR_DL_PY_CURL@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python lxml module
  @@INSTALL_FULL_OR_DL_PY_LXML@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python crypto module
  @@INSTALL_FULL_OR_DL_PY_CRYPTO@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Python croniter module
  @@INSTALL_FULL_OR_DL_PY_CRON@@
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  Delete $INSTDIR\tmp\${PY_WIN32}
  Delete $INSTDIR\tmp\${PY_NETIFACES}
  Delete $INSTDIR\tmp\${PY_COMTYPES}
  Delete $INSTDIR\tmp\${PY_CONFIGPARSER}
  Delete $INSTDIR\tmp\${PY_UTILS}
  Delete $INSTDIR\tmp\${PY_SLEEKXMPP}
  Delete $INSTDIR\tmp\${PY_WMI}
  Delete $INSTDIR\tmp\${PY_ZIPFILE}
  Delete $INSTDIR\tmp\${PY_CURL}
  Delete $INSTDIR\tmp\${PY_LXML}
  Delete $INSTDIR\tmp\${PY_CRYPTO}
  Delete $INSTDIR\tmp\${PY_CRON}
  Delete $INSTDIR\tmp\${PY_CRON_DEPS_1}
  Delete $INSTDIR\tmp\${PY_CRON_DEPS_2}
SectionEnd

; rsync installation
Section "rsync" sec_rsync
  SetOutPath "$INSTDIR\tmp"
  @@FULL_OR_DL_OPENSSH@@
  File "${DOWNLOADS_DIR}/${RSYNC_FILENAME}"
  SetOutPath "$INSTDIR\.ssh\"
  File "${LAUNCHER_SSH_KEY}"
  ${LogString} "OpenSSH Installation...."
  ${LogString} "------------------------------------------------------"

  ; Install of OpenSSH
  ; Extract OpenSSH
  ZipDLL::extractall "$INSTDIR\tmp\${OPENSSH_FILENAME}" "$PROGRAMFILES"
  ; Create the services
  StrCpy $0 `sc.exe create ssh-agent binpath= "$PROGRAMFILES\${OPENSSH_NAME}\ssh-agent.exe" displayname= "SSH Agent" type= share start= auto`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  StrCpy $0 `sc.exe sdset ssh-agent D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;RP;;;AU)`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  StrCpy $0 `sc.exe create sshd binpath= "$PROGRAMFILES\${OPENSSH_NAME}\sshd.exe" displayname= "SSH Deamon" type= share start= auto`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  StrCpy $0 `sc.exe config sshd obj= "NT SERVICE\SSHD"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  StrCpy $0 `"$PROGRAMFILES\${OPENSSH_NAME}\ntrights.exe" -u "NT SERVICE\SSHD" +r SeAssignPrimaryTokenPrivilege`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Generate SSH Keys
  SetOutPath "$PROGRAMFILES\${OPENSSH_NAME}"
  StrCpy $0 `"$PROGRAMFILES\${OPENSSH_NAME}\ssh-keygen.exe" -A`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Allow key-based authentication
  ; Copy DLL to system32 folder
  CopyFiles "$PROGRAMFILES\${OPENSSH_NAME}\ssh-lsa.dll" "$SYSDIR"
  ; This requires a reboot
  SetRebootFlag true
  StrCpy $0 `reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa" /v "Authentication Packages" /t REG_MULTI_SZ /d msv1_0\0ssh-lsa.dll -f`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Create Pulse user and copy laucher public key
  pwgen::GeneratePassword 12
  Pop $0
  Var /GLOBAL Password
  StrCpy $Password "$0"
  StrCpy $0 `net user "pulse" "$Password" /ADD /COMMENT:"Pulse user with admin rights on the system" /PROFILEPATH:"$INSTDIR"`
  ${LogString} "Running net user pulse ************ /ADD /COMMENT:Pulse user with admin rights on the system /PROFILEPATH:$INSTDIR"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  SetOutPath "$INSTDIR\.ssh"
  Rename id_rsa.pub authorized_keys
  ${LogString} "Setting permissions on pulse user profile folder"
  StrCpy $0 `wmic useraccount where name="pulse" get sid /VALUE`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  ${If} $0 = 0
    Pop $1
    ${Trim} $0 $1
    ${StrTok} $0 "$0" "=" "L" "1"
    Var /GLOBAL SID
    StrCpy $SID "$0"
    ${LogString} "User SID: $SID"
    WriteRegExpandStr HKLM "Software\Microsoft\Windows NT\CurrentVersion\ProfileList\$SID" "ProfileImagePath" "$INSTDIR"
  ${Else}
    ${LogString} "Return code was: $0"
  ${EndIf}
  AccessControl::ClearOnFile /NOINHERIT "$INSTDIR" pulse FullAccess
  Pop $R0
  ${If} $R0 == error
    Pop $R0
    ${LogString} "AccessControl error: $R0"
  ${EndIf}
  ${LogString} "-------------------"
  ; Set pulse account password to not expire
  StrCpy $0 `wmic useraccount where "Name='pulse'" set PasswordExpires=False`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  ; Add pulse user to administrators group
  StrCpy $0 `net localgroup administrators "pulse" /ADD || net localgroup administrateurs "pulse" /ADD`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  ; Hide the account
  WriteRegDWORD HKLM "Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" "pulse" 0

  ; Start the service
  StrCpy $0 `sc start sshd`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
  StrCpy $0 `sc start ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Setup of Windows firewall to allow ssh
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall add portopening TCP 22 "SSH for Pulse"`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall add rule name="SSH for Pulse" dir=in action=allow protocol=TCP localport=22`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of rsync
  ; Extract rsync
  ZipDLL::extractall "$INSTDIR\tmp\${RSYNC_FILENAME}" "$INSTDIR\tmp\"
  ; Copy rsync files to system32 folder
  CopyFiles "$INSTDIR\tmp\rsync\*" "$SYSDIR"
  ${LogString} "-------------------"

  Delete $INSTDIR\tmp\${OPENSSH_FILENAME}
  Delete $INSTDIR\tmp\${RSYNC_FILENAME}
  RMDir /r $INSTDIR\tmp\rsync
SectionEnd

; Setup of RDP & Firewall
Section "RDP Setup" sec_rdp
  ${LogString} "RDP setup for remote control of machine via Pulse...."
  ${LogString} "------------------------------------------------------"

  ; Setup of rdp
  WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server" "fDenyTSConnections" 0
  ${If} ${AtLeastWin7}
    WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" "UserAuthentication" 0
  ${EndIf}
  ${If} ${AtLeastWin7}
    WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" "SecurityLayer" 0
  ${EndIf}

  ; Setup of Windows firewall to allow rdp
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall set service type = remotedesktop mode = enable`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall set rule group="remote desktop" new enable=Yes || netsh advfirewall firewall set rule group="Microsoft Remote Desktop" new enable=Yes`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"
SectionEnd

; Setup of Fusion Inventory agent
Section "Fusion Inventory agent" sec_fusinv
  SetOutPath "$INSTDIR\tmp"
  @@FULL_OR_DL_FUSION_INVENTORY_AGENT@@
  ${LogString} "Fusion Inventory agent setup...."
  ${LogString} "------------------------------------------------------"

  ; Install of Fusion Inventory agent
  !If "${INVENTORY_TAG}" == ''
    StrCpy $0 `"$INSTDIR\tmp\${FUSION_INVENTORY_AGENT_FILENAME}" /S /acceptlicense /no-start-menu /execmode=Manual`
  !Else
    StrCpy $0 `"$INSTDIR\tmp\${FUSION_INVENTORY_AGENT_FILENAME}" /S /acceptlicense /no-start-menu /execmode=Manual /tag="${INVENTORY_TAG}"`
  !EndIf
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  Delete $INSTDIR\tmp\${FUSION_INVENTORY_AGENT_FILENAME}
SectionEnd

; Installation of Pulse Agent
Section "!${PRODUCT_NAME}" sec_app
  SetOutPath "$INSTDIR\tmp"
  File "${PULSE_AGENT}"
  File "${PULSE_AGENT_PLUGINS}"
  ${LogString} "Pulse Agent Installation...."
  ${LogString} "------------------------------------------------------"

  ; Install of Pulse agent
  StrCpy $0 `C:\Python27\Scripts\pip install --upgrade --no-index --find-links="$INSTDIR\tmp" ${PULSE_AGENT}`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Install of Pulse agent plugins
  StrCpy $0 `C:\Python27\Scripts\pip install --upgrade --no-index --find-links="$INSTDIR\tmp" ${PULSE_AGENT_PLUGINS}`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Copy of agent config file
  SetOutPath "$INSTDIR\etc"
  File "../config/${PULSE_AGENT_CONFFILE}"

  ; Creation of the task
  SetOutPath "$INSTDIR\tmp"
  File "${PULSE_AGENT_TASK_XML}"
  ${If} ${AtLeastWin7}
    StrCpy $0 `SCHTASKS /Create /XML "$INSTDIR\tmp\${PULSE_AGENT_TASK_XML}" /TN "${PRODUCT_NAME}"`
  ${Else}
    StrCpy $0 `SCHTASKS /Create /SC ONSTART /RU "System" /TN "${PRODUCT_NAME}" /TR "C:\Python27\python.exe C:\Python27\Lib\site-packages\${PULSE_AGENT_MODULE}\launcher.py -t machine"`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${LogString} "-------------------"

  ; Create log folder to hold agent logs
  CreateDirectory $INSTDIR\var\log
  ; Create packages folder to hold packages to be deployed on client
  CreateDirectory $INSTDIR\tmp\packages

  SectionIn RO
  WriteUninstaller $INSTDIR\uninstall.exe
  ; Add ourselves to Add/remove programs
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "${PRODUCT_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" '"$INSTDIR\uninstall.exe"'
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" 1
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRepair" 1

  ; Write the version installed in registry
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "CurrentVersion" "${PRODUCT_VERSION}"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "InstallLocation" "$INSTDIR"

  Delete $INSTDIR\tmp\${PULSE_AGENT}
  Delete $INSTDIR\tmp\${PULSE_AGENT_TASK_XML}
  Delete $INSTDIR\tmp\${PULSE_AGENT_PLUGINS}

  Sleep 20000
SectionEnd

; What needs to be done for uninstalling
Section "Uninstall"
  Delete $INSTDIR\uninstall.exe

  ; Remove pulse user
  StrCpy $0 `net user "pulse" /DELETE`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"

  ; Remove OpenSSH
  StrCpy $0 `sc.exe stop ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe stop sshd`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe delete ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe delete sshd`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  Delete $SYSDIR\ssh-lsa.dll
  RMDir /r $PROGRAMFILES\${OPENSSH_NAME}

  ; Remove libcurl
  Delete $SYSDIR\${LIBCURL_FILENAME}

  ; Uninstall agent
  StrCpy $0 `SCHTASKS /Delete /TN "Pulse Agent"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `C:\Python27\Scripts\pip uninstall ${PULSE_AGENT_PLUGINS} -y`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `C:\Python27\Scripts\pip uninstall ${PULSE_AGENT_MODULE} -y`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  RMDir /r "C:\Python27\Lib\site-packages\pulse_xmpp_agent\"
  Delete $INSTDIR\etc\${PULSE_AGENT_CONFFILE}
  RMDir /r $INSTDIR
  DeleteRegKey HKLM "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
SectionEnd

; Functions

Function .onInit
  ; XP or later
  ${IfNot} ${AtLeastWinXP}
    MessageBox MB_OK|MB_ICONEXCLAMATION "XP and above required for running ${PRODUCT_NAME}"
    Quit
  ${EndIf}

  ; Make sure we are running as admin
  UserInfo::GetAccountType
  pop $0
  ${If} $0 != "admin" ;Require admin rights on NT4+
    MessageBox mb_iconstop "Administrator rights required!"
    SetErrorLevel 740 ;ERROR_ELEVATION_REQUIRED
    Quit
  ${EndIf}

  ; Install log initialization
  CreateDirectory "$INSTDIR\tmp"
  ${LogInit} "$INSTDIR\tmp\install.log"
  ${LogString} "Starting install..."
  !insertmacro GetTime
  ${GetTime} "" "L" $0 $1 $2 $3 $4 $5 $6
  ${LogString} "Start time: $3 $0/$1/$2 at $4:$5:$6"
FunctionEnd

Function .onGUIEnd
  ; Write the log file
  !insertmacro Log_Close
FunctionEnd

Function .onMouseOverSection
  ; Find which section the mouse is over, and set the corresponding description.
  FindWindow $R0 "#32770" "" $HWNDPARENT
  GetDlgItem $R0 $R0 1043 ; description item (must be added to the UI)

  StrCmp $0 ${sec_py} 0 +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:The Python interpreter. \
          This is required for ${PRODUCT_NAME} to run."

  StrCmp $0 ${sec_pymod} 0 +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Python modules required by ${PRODUCT_NAME}."

  StrCmp $0 ${sec_rsync} 0 +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:rsync required for deployment, backup, etc."

  StrCmp $0 ${sec_rdp} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Setup RDP protocol required for remote control"

  StrCmp $0 ${sec_fusinv} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Fusion inventory agent required for inventory"

  StrCmp $0 ${sec_app} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:${PRODUCT_NAME}"
FunctionEnd
